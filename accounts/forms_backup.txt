from django import forms
from django.forms import ModelForm
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm

class UserCreationForm(forms.ModelForm):
    """A form for creating new users. Includes all the required
    fields, plus a repeated password."""
    password1 = forms.CharField(label='Password', widget=forms.PasswordInput)
    password2 = forms.CharField(label='Password confirmation', widget=forms.PasswordInput)

    class Meta:
        model = User
        fields = ('is_agent','is_customer', 'first_name', 'last_name', 'email', 'username')

    def clean_password2(self):
        # Check that the two password entries match
        password1 = self.cleaned_data.get("password1")
        password2 = self.cleaned_data.get("password2")
        if password1 and password2 and password1 != password2:
            raise ValidationError("Passwords don't match")
        return password2

    def save(self, commit=True):
        # Save the provided password in hashed format
        user = super().save(commit=False)
        user.set_password(self.cleaned_data["password1"])
        if commit:
            user.save()
        return user

#class CustomUserCreationForm(UserCreationForm):

#    phoneNo = forms.CharField(label='Phone Number')

#    class Meta:
#        model = User
#        fields = [ 'email', 'username', 'phoneNo', 'password1', 'password2', 'is_admin','is_agent', 'is_customer']

class RegistrationForm(forms.ModelForm):
    """A form for creating new users. Includes all the required
    fields, plus a repeated password."""
    password1 = forms.CharField(label='Password', widget=forms.PasswordInput)
    password2 = forms.CharField(label='Confirm Password', widget=forms.PasswordInput)

    class Meta:
        model = User
        fields = ('is_admin', 'is_agent','is_customer', 'username', 'email', 'password1', 'password2')

class UserLoginForm(forms.Form):
    """Form to log in user"""
    username = forms.CharField(label='Username', widget=forms.TextInput())
    password = forms.CharField(label='Password',widget=forms.PasswordInput())

    class Meta:
        model = User
        fields = ['username', 'password']
